[{"title":"clash verge 订阅扩展规则，防止部分学术网站走代理","path":"/2024/12/02/clash订阅规则扩展/","content":"在校内访问学术网站是不需要代理的，如果通过代理的话每次都会弹出学校账户验证很麻烦，因此有必要将学术网站的访问设置为直连（即不通过代理）右键订阅点编辑规则–高级 点击高级 将里面的代码替换为下面的代码就好了 12345678910111213141516171819202122232425prepend: - &#x27;DOMAIN,tuchong.com,DIRECT&#x27; - &#x27;DOMAIN-SUFFIX,taylorandfrancis.com,DIRECT&#x27; - &#x27;DOMAIN,dl.acm.org,DIRECT&#x27; - &#x27;DOMAIN,acm-prod.disqus.com,DIRECT&#x27; - &#x27;DOMAIN-SUFFIX,sciencedirectassets.com,DIRECT&#x27; - &#x27;DOMAIN-SUFFIX,readspeaker.com,DIRECT&#x27; - &#x27;DOMAIN-SUFFIX,webofknowledge.com,DIRECT&#x27; - &#x27;DOMAIN-KEYWORD,pubmed,DIRECT&#x27; - &#x27;DOMAIN-KEYWORD,springer,DIRECT&#x27; - &#x27;DOMAIN-KEYWORD,ieee,DIRECT&#x27; - &#x27;DOMAIN-KEYWORD,elsevier,DIRECT&#x27; - &#x27;DOMAIN-KEYWORD,sciencedirect,DIRECT&#x27; - &#x27;DOMAIN-KEYWORD,nature,DIRECT&#x27; - &#x27;DOMAIN-KEYWORD,tandfonline,DIRECT&#x27; - &#x27;DOMAIN-SUFFIX,elsevier.com,DIRECT&#x27; - &#x27;DOMAIN-SUFFIX,edu.cn,DIRECT&#x27; - &#x27;DOMAIN-SUFFIX,webofscience.com,DIRECT&#x27; - &#x27;DOMAIN-SUFFIX,tandfonline.com,DIRECT&#x27; - &#x27;DOMAIN-SUFFIX,link.springer.com,DIRECT&#x27; - &#x27;DOMAIN-SUFFIX,onlinelibrary.wiley.com,DIRECT&#x27; - &#x27;DOMAIN-SUFFIX,sciencedirect.com,DIRECT&#x27; - &#x27;DOMAIN-SUFFIX,taylorfrancis.com,DIRECT&#x27;append: []delete: []"},{"title":"matplotlib绘制三维散点图，并添加包围椭球及各维度核密度","path":"/2024/12/02/matplotlib绘制三维散点图/","content":"背景我们在绘制三维散点时经常需要在一张图中描述：1.散点在空间中的分布状态；2.散点在空间不同维度的分布情况。下面介绍一种：通过椭球描述散点在空间中的分布状态，并通过核密度曲线描述散点在空间不同维度的分布情况的方法。 实现导入必要的库，数据准备 123import matplotlib.pyplot as pltimport numpy as npfrom scipy.stats import gaussian_kde # 导入高斯核函数 创建3D图12ax = plt.figure().add_subplot(projection=&#x27;3d&#x27;)data=[] 随机生成data定义一个函数来生成数据 12345def generate_data(mean, std_dev): return np.random.normal(mean, std_dev, 100)data.append(generate_data(0.8, 0.1))data.append(generate_data(15, 2))data.append(generate_data(60, 10)) 显示散点图的包围椭球matplotlib中需要构造点阵以显示面，因此我们需要首先生成椭球面的XYZ坐标，然后绘制 12345678910111213141516def draw_ellipsoid(ax, data, color): # 计算椭球的中心 center = np.mean(data, axis=1) # 计算椭球的半径 radius = 0.5 * (np.max(data, axis=1) - np.min(data, axis=1)) # 生成椭球的表面点 u = np.linspace(0, 2 * np.pi, 100) v = np.linspace(0, np.pi, 100) x = center[0] + radius[0] * np.outer(np.cos(u), np.sin(v)) y = center[1] + radius[1] * np.outer(np.sin(u), np.sin(v)) z = center[2] + radius[2] * np.outer(np.ones(np.size(u)), np.cos(v)) # 绘制椭球 ax.plot_surface(x, y, z, color=color, alpha=0.2) 显示散点在空间不同维度的分布情况matplotlib的官网实例中提到，可以采用zdir 字段实现2D内容在3D图上的绘制，这里实际上可以简单将zdir设置为2D图中“缺失的”那个维度，如下所示 在X-Z平面上绘制核密度估计图 12345def draw_kde3d_X2XZ(ax, data, color): kde = gaussian_kde(data) xs = np.linspace(np.min(data), np.max(data), 100) ys = kde(xs) ax.plot(xs, ys*10, zs=0, zdir=&#x27;y&#x27;, color=color) 在Y-Z平面上绘制核密度估计图 12345def draw_kde3d_Y2YZ(ax, data, color): kde = gaussian_kde(data) xs = np.linspace(np.min(data), np.max(data), 100) ys = kde(xs) ax.plot(xs,ys*100, zs=[1.2 for _ in range(len(data))], zdir=&#x27;x&#x27;, color=color) 在Z-Y平面上绘制核密度估计图 12345def draw_kde3d_Z2ZY(ax, data, color): kde = gaussian_kde(data) xs = np.linspace(np.min(data), np.max(data), 100) ys = kde(xs) ax.plot(ys*80,xs, zs=0, zdir=&#x27;x&#x27;, color=color) 其实这里zdir其实就是与我们要绘制的平面相垂直的坐标轴，zdir在这里起到了“临时更换坐标轴”的作用。 全部代码 123import matplotlib.pyplot as pltimport numpy as npfrom scipy.stats import gaussian_kde 创建3D图12ax = plt.figure().add_subplot(projection=&#x27;3d&#x27;)data=[] 随机生成data12345678910111213141516171819def generate_data(mean, std_dev): return np.random.normal(mean, std_dev, 100)data.append(generate_data(0.8, 0.1))data.append(generate_data(15, 2))data.append(generate_data(60, 10))def draw_ellipsoid(ax, data, color): # 计算椭球的中心 center = np.mean(data, axis=1) # 计算椭球的半径 radius = 0.5 * (np.max(data, axis=1) - np.min(data, axis=1)) # 生成椭球的表面点 u = np.linspace(0, 2 * np.pi, 100) v = np.linspace(0, np.pi, 100) x = center[0] + radius[0] * np.outer(np.cos(u), np.sin(v)) y = center[1] + radius[1] * np.outer(np.sin(u), np.sin(v)) z = center[2] + radius[2] * np.outer(np.ones(np.size(u)), np.cos(v)) # 绘制椭球 ax.plot_surface(x, y, z, color=color, alpha=0.2) 在X-Z平面上绘制核密度估计图12345def draw_kde3d_X2XZ(ax, data, color): kde = gaussian_kde(data) xs = np.linspace(np.min(data), np.max(data), 100) ys = kde(xs) ax.plot(xs, ys*10, zs=0, zdir=&#x27;y&#x27;, color=color) 在Y-Z平面上绘制核密度估计图12345def draw_kde3d_Y2YZ(ax, data, color): kde = gaussian_kde(data) xs = np.linspace(np.min(data), np.max(data), 100) ys = kde(xs) ax.plot(xs,ys*100, zs=[1.2 for _ in range(len(data))], zdir=&#x27;x&#x27;, color=color) 在Z-Y平面上绘制核密度估计图12345def draw_kde3d_Z2ZY(ax, data, color): kde = gaussian_kde(data) xs = np.linspace(np.min(data), np.max(data), 100) ys = kde(xs) ax.plot(ys*80,xs, zs=0, zdir=&#x27;x&#x27;, color=color) 1xyzlims=(0, 1.2, 0, 22, 0, 105) 绘制散点图ax.scatter(data[0], data[1], data[2], c&#x3D;’g’, marker&#x3D;’*’, s&#x3D;10, label&#x3D;’data’) 绘制椭球 1draw_ellipsoid(ax, data, &#x27;g&#x27;) 绘制X轴方向的核密度估计 1draw_kde3d_X2XZ(ax, data[0], &#x27;g&#x27;) 绘制Y轴方向的核密度估计 1draw_kde3d_Y2YZ(ax, data[1], &#x27;g&#x27;) 绘制Z轴方向的核密度估计 12345draw_kde3d_Z2ZY(ax, data[2], &#x27;g&#x27;)ax.set(xlim=(0, 1.2), ylim=(0, 22), zlim=(0, 105))Set zoom and angle viewax.view_init(20, -35, 0)ax.set_box_aspect(None, zoom=1) 设置坐标轴的网格线颜色 1234567ax.xaxis.pane.set_edgecolor((1.0, 1.0, 1.0, 0.0))ax.yaxis.pane.set_edgecolor((1.0, 1.0, 1.0, 0.0))ax.zaxis.pane.set_edgecolor((1.0, 1.0, 1.0, 0.0))ax.set_xlabel(&#x27;X&#x27;)ax.set_ylabel(&#x27;Y&#x27;)ax.set_zlabel(&#x27;Z&#x27;)plt.show() 实现效果 一点小改进有些时候，我们可能有多种数据需要进行比较。这时，坐标系、网格等元素会对我们的展示造成干扰。因此，这里可以关闭这些内容的显示，并使用立方体表示三维空间。 123456def showbox(data,ax): x, y, z = 0,0,0 #盒子坐标 dx, dy, dz = data #盒子长、宽、高 ax.bar3d(x, y, z, dx, dy, dz, color=&quot;green&quot;,zsort=&#x27;average&#x27;,edgecolor=&#x27;black&#x27;,linewidth=1,alpha=0)···其他代码··· 设置坐标轴的背景颜色 123ax.xaxis.pane.fill = Falseax.yaxis.pane.fill = Falseax.zaxis.pane.fill = False 设置坐标轴不可见 12ax.axis(&#x27;off&#x27;)ax.grid(False) 设置坐标轴的网格线颜色 123ax.xaxis.pane.set_edgecolor((1.0, 1.0, 1.0, 0.0))ax.yaxis.pane.set_edgecolor((1.0, 1.0, 1.0, 0.0))ax.zaxis.pane.set_edgecolor((1.0, 1.0, 1.0, 0.0)) 关闭坐标轴的刻度 1234ax.set_xticks([])ax.set_yticks([])ax.set_zticks([])box = (1.2,22,105) 显示立方体 12345showbox(box,ax)ax.set_xlabel(&#x27;X&#x27;)ax.set_ylabel(&#x27;Y&#x27;)ax.set_zlabel(&#x27;Z&#x27;)plt.show() 最终效果"},{"title":"Hello World","path":"/2024/12/02/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]