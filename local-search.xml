<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>clash verge 订阅扩展规则，防止部分学术网站走代理</title>
    <link href="/2024/12/02/clash%E8%AE%A2%E9%98%85%E8%A7%84%E5%88%99%E6%89%A9%E5%B1%95/"/>
    <url>/2024/12/02/clash%E8%AE%A2%E9%98%85%E8%A7%84%E5%88%99%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<p>在校内访问学术网站是不需要代理的，如果通过代理的话每次都会弹出学校账户验证很麻烦，因此有必要将学术网站的访问设置为直连（即不通过代理）<br><img src="/2024/12/02/matplotlib%E7%BB%98%E5%88%B6%E4%B8%89%E7%BB%B4%E6%95%A3%E7%82%B9%E5%9B%BE/"><br>右键订阅点编辑规则–高级</p><p><img src="/2024/12/02/matplotlib%E7%BB%98%E5%88%B6%E4%B8%89%E7%BB%B4%E6%95%A3%E7%82%B9%E5%9B%BE/"><br>点击高级</p><p>将里面的代码替换为下面的代码就好了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prepend:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN,tuchong.com,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,taylorandfrancis.com,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN,dl.acm.org,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN,acm-prod.disqus.com,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,sciencedirectassets.com,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,readspeaker.com,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,webofknowledge.com,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-KEYWORD,pubmed,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-KEYWORD,springer,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-KEYWORD,ieee,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-KEYWORD,elsevier,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-KEYWORD,sciencedirect,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-KEYWORD,nature,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-KEYWORD,tandfonline,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,elsevier.com,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,edu.cn,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,webofscience.com,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,tandfonline.com,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,link.springer.com,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,onlinelibrary.wiley.com,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,sciencedirect.com,DIRECT&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,taylorfrancis.com,DIRECT&#x27;</span></span><br><span class="line"><span class="attr">append:</span> []</span><br><span class="line"><span class="attr">delete:</span> []</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>technique</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vpn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matplotlib绘制三维散点图，并添加包围椭球及各维度核密度</title>
    <link href="/2024/12/02/matplotlib%E7%BB%98%E5%88%B6%E4%B8%89%E7%BB%B4%E6%95%A3%E7%82%B9%E5%9B%BE/"/>
    <url>/2024/12/02/matplotlib%E7%BB%98%E5%88%B6%E4%B8%89%E7%BB%B4%E6%95%A3%E7%82%B9%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我们在绘制三维散点时经常需要在一张图中描述：1.散点在空间中的分布状态；2.散点在空间不同维度的分布情况。<br>下面介绍一种：通过椭球描述散点在空间中的分布状态，并通过核密度曲线描述散点在空间不同维度的分布情况的方法。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>导入必要的库，数据准备</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> gaussian_kde  <span class="comment"># 导入高斯核函数</span></span><br></pre></td></tr></table></figure><h1 id="创建3D图"><a href="#创建3D图" class="headerlink" title="创建3D图"></a>创建3D图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ax = plt.figure().add_subplot(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">data=[]</span><br></pre></td></tr></table></figure><h1 id="随机生成data"><a href="#随机生成data" class="headerlink" title="随机生成data"></a>随机生成data</h1><p>定义一个函数来生成数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_data</span>(<span class="params">mean, std_dev</span>):</span><br><span class="line">    <span class="keyword">return</span> np.random.normal(mean, std_dev, <span class="number">100</span>)</span><br><span class="line">data.append(generate_data(<span class="number">0.8</span>, <span class="number">0.1</span>))</span><br><span class="line">data.append(generate_data(<span class="number">15</span>, <span class="number">2</span>))</span><br><span class="line">data.append(generate_data(<span class="number">60</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><h1 id="显示散点图的包围椭球"><a href="#显示散点图的包围椭球" class="headerlink" title="显示散点图的包围椭球"></a>显示散点图的包围椭球</h1><p>matplotlib中需要构造点阵以显示面，因此我们需要首先生成椭球面的XYZ坐标，然后绘制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">draw_ellipsoid</span>(<span class="params">ax, data, color</span>):</span><br><span class="line">    <span class="comment"># 计算椭球的中心</span></span><br><span class="line">    center = np.mean(data, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算椭球的半径</span></span><br><span class="line">    radius = <span class="number">0.5</span> * (np.<span class="built_in">max</span>(data, axis=<span class="number">1</span>) - np.<span class="built_in">min</span>(data, axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成椭球的表面点</span></span><br><span class="line">    u = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">100</span>)</span><br><span class="line">    v = np.linspace(<span class="number">0</span>, np.pi, <span class="number">100</span>)</span><br><span class="line">    x = center[<span class="number">0</span>] + radius[<span class="number">0</span>] * np.outer(np.cos(u), np.sin(v))</span><br><span class="line">    y = center[<span class="number">1</span>] + radius[<span class="number">1</span>] * np.outer(np.sin(u), np.sin(v))</span><br><span class="line">    z = center[<span class="number">2</span>] + radius[<span class="number">2</span>] * np.outer(np.ones(np.size(u)), np.cos(v))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制椭球</span></span><br><span class="line">    ax.plot_surface(x, y, z, color=color, alpha=<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><h1 id="显示散点在空间不同维度的分布情况"><a href="#显示散点在空间不同维度的分布情况" class="headerlink" title="显示散点在空间不同维度的分布情况"></a>显示散点在空间不同维度的分布情况</h1><p>matplotlib的官网实例中提到，可以采用zdir 字段实现2D内容在3D图上的绘制，这里实际上可以简单将zdir设置为2D图中“缺失的”那个维度，如下所示</p><p>在X-Z平面上绘制核密度估计图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">draw_kde3d_X2XZ</span>(<span class="params">ax, data,  color</span>):</span><br><span class="line">    kde = gaussian_kde(data)</span><br><span class="line">    xs = np.linspace(np.<span class="built_in">min</span>(data), np.<span class="built_in">max</span>(data), <span class="number">100</span>)</span><br><span class="line">    ys = kde(xs)</span><br><span class="line">    ax.plot(xs, ys*<span class="number">10</span>, zs=<span class="number">0</span>, zdir=<span class="string">&#x27;y&#x27;</span>, color=color)</span><br></pre></td></tr></table></figure><p>在Y-Z平面上绘制核密度估计图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">draw_kde3d_Y2YZ</span>(<span class="params">ax, data,  color</span>):</span><br><span class="line">    kde = gaussian_kde(data)</span><br><span class="line">    xs = np.linspace(np.<span class="built_in">min</span>(data), np.<span class="built_in">max</span>(data), <span class="number">100</span>)</span><br><span class="line">    ys = kde(xs)</span><br><span class="line">    ax.plot(xs,ys*<span class="number">100</span>,  zs=[<span class="number">1.2</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data))], zdir=<span class="string">&#x27;x&#x27;</span>, color=color)</span><br></pre></td></tr></table></figure><p>在Z-Y平面上绘制核密度估计图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">draw_kde3d_Z2ZY</span>(<span class="params">ax, data,  color</span>):</span><br><span class="line">    kde = gaussian_kde(data)</span><br><span class="line">    xs = np.linspace(np.<span class="built_in">min</span>(data), np.<span class="built_in">max</span>(data), <span class="number">100</span>)</span><br><span class="line">    ys = kde(xs)</span><br><span class="line">    ax.plot(ys*<span class="number">80</span>,xs,  zs=<span class="number">0</span>, zdir=<span class="string">&#x27;x&#x27;</span>, color=color)</span><br></pre></td></tr></table></figure><p>其实这里zdir其实就是与我们要绘制的平面相垂直的坐标轴，zdir在这里起到了“临时更换坐标轴”的作用。</p><p>全部代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> gaussian_kde</span><br></pre></td></tr></table></figure><h1 id="创建3D图-1"><a href="#创建3D图-1" class="headerlink" title="创建3D图"></a>创建3D图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ax = plt.figure().add_subplot(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">data=[]</span><br></pre></td></tr></table></figure><h1 id="随机生成data-1"><a href="#随机生成data-1" class="headerlink" title="随机生成data"></a>随机生成data</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_data</span>(<span class="params">mean, std_dev</span>):</span><br><span class="line">    <span class="keyword">return</span> np.random.normal(mean, std_dev, <span class="number">100</span>)</span><br><span class="line">data.append(generate_data(<span class="number">0.8</span>, <span class="number">0.1</span>))</span><br><span class="line">data.append(generate_data(<span class="number">15</span>, <span class="number">2</span>))</span><br><span class="line">data.append(generate_data(<span class="number">60</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_ellipsoid</span>(<span class="params">ax, data, color</span>):</span><br><span class="line">    <span class="comment"># 计算椭球的中心</span></span><br><span class="line">    center = np.mean(data, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 计算椭球的半径</span></span><br><span class="line">    radius = <span class="number">0.5</span> * (np.<span class="built_in">max</span>(data, axis=<span class="number">1</span>) - np.<span class="built_in">min</span>(data, axis=<span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 生成椭球的表面点</span></span><br><span class="line">    u = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">100</span>)</span><br><span class="line">    v = np.linspace(<span class="number">0</span>, np.pi, <span class="number">100</span>)</span><br><span class="line">    x = center[<span class="number">0</span>] + radius[<span class="number">0</span>] * np.outer(np.cos(u), np.sin(v))</span><br><span class="line">    y = center[<span class="number">1</span>] + radius[<span class="number">1</span>] * np.outer(np.sin(u), np.sin(v))</span><br><span class="line">    z = center[<span class="number">2</span>] + radius[<span class="number">2</span>] * np.outer(np.ones(np.size(u)), np.cos(v))</span><br><span class="line">    <span class="comment"># 绘制椭球</span></span><br><span class="line">    ax.plot_surface(x, y, z, color=color, alpha=<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><h1 id="在X-Z平面上绘制核密度估计图"><a href="#在X-Z平面上绘制核密度估计图" class="headerlink" title="在X-Z平面上绘制核密度估计图"></a>在X-Z平面上绘制核密度估计图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">draw_kde3d_X2XZ</span>(<span class="params">ax, data,  color</span>):</span><br><span class="line">    kde = gaussian_kde(data)</span><br><span class="line">    xs = np.linspace(np.<span class="built_in">min</span>(data), np.<span class="built_in">max</span>(data), <span class="number">100</span>)</span><br><span class="line">    ys = kde(xs)</span><br><span class="line">    ax.plot(xs, ys*<span class="number">10</span>, zs=<span class="number">0</span>, zdir=<span class="string">&#x27;y&#x27;</span>, color=color)</span><br></pre></td></tr></table></figure><h1 id="在Y-Z平面上绘制核密度估计图"><a href="#在Y-Z平面上绘制核密度估计图" class="headerlink" title="在Y-Z平面上绘制核密度估计图"></a>在Y-Z平面上绘制核密度估计图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">draw_kde3d_Y2YZ</span>(<span class="params">ax, data,  color</span>):</span><br><span class="line">    kde = gaussian_kde(data)</span><br><span class="line">    xs = np.linspace(np.<span class="built_in">min</span>(data), np.<span class="built_in">max</span>(data), <span class="number">100</span>)</span><br><span class="line">    ys = kde(xs)</span><br><span class="line">    ax.plot(xs,ys*<span class="number">100</span>,  zs=[<span class="number">1.2</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data))], zdir=<span class="string">&#x27;x&#x27;</span>, color=color)</span><br></pre></td></tr></table></figure><h1 id="在Z-Y平面上绘制核密度估计图"><a href="#在Z-Y平面上绘制核密度估计图" class="headerlink" title="在Z-Y平面上绘制核密度估计图"></a>在Z-Y平面上绘制核密度估计图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">draw_kde3d_Z2ZY</span>(<span class="params">ax, data,  color</span>):</span><br><span class="line">    kde = gaussian_kde(data)</span><br><span class="line">    xs = np.linspace(np.<span class="built_in">min</span>(data), np.<span class="built_in">max</span>(data), <span class="number">100</span>)</span><br><span class="line">    ys = kde(xs)</span><br><span class="line">    ax.plot(ys*<span class="number">80</span>,xs,  zs=<span class="number">0</span>, zdir=<span class="string">&#x27;x&#x27;</span>, color=color)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xyzlims=(<span class="number">0</span>, <span class="number">1.2</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">0</span>, <span class="number">105</span>)</span><br></pre></td></tr></table></figure><p>绘制散点图<br>ax.scatter(data[0], data[1], data[2], c&#x3D;’g’, marker&#x3D;’*’, s&#x3D;10, label&#x3D;’data’)</p><p>绘制椭球</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw_ellipsoid(ax, data, <span class="string">&#x27;g&#x27;</span>)</span><br></pre></td></tr></table></figure><p>绘制X轴方向的核密度估计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw_kde3d_X2XZ(ax, data[<span class="number">0</span>], <span class="string">&#x27;g&#x27;</span>)</span><br></pre></td></tr></table></figure><p>绘制Y轴方向的核密度估计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw_kde3d_Y2YZ(ax, data[<span class="number">1</span>], <span class="string">&#x27;g&#x27;</span>)</span><br></pre></td></tr></table></figure><p>绘制Z轴方向的核密度估计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">draw_kde3d_Z2ZY(ax, data[<span class="number">2</span>], <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">ax.<span class="built_in">set</span>(xlim=(<span class="number">0</span>, <span class="number">1.2</span>), ylim=(<span class="number">0</span>, <span class="number">22</span>), zlim=(<span class="number">0</span>, <span class="number">105</span>))</span><br><span class="line"><span class="type">Set</span> zoom <span class="keyword">and</span> angle view</span><br><span class="line">ax.view_init(<span class="number">20</span>, -<span class="number">35</span>, <span class="number">0</span>)</span><br><span class="line">ax.set_box_aspect(<span class="literal">None</span>, zoom=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>设置坐标轴的网格线颜色</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ax.xaxis.pane.set_edgecolor((<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>))</span><br><span class="line">ax.yaxis.pane.set_edgecolor((<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>))</span><br><span class="line">ax.zaxis.pane.set_edgecolor((<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>))</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><p><img src="/2024/12/02/matplotlib%E7%BB%98%E5%88%B6%E4%B8%89%E7%BB%B4%E6%95%A3%E7%82%B9%E5%9B%BE/%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="效果图"></p><h1 id="一点小改进"><a href="#一点小改进" class="headerlink" title="一点小改进"></a>一点小改进</h1><p>有些时候，我们可能有多种数据需要进行比较。这时，坐标系、网格等元素会对我们的展示造成干扰。因此，这里可以关闭这些内容的显示，并使用立方体表示三维空间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">showbox</span>(<span class="params">data,ax</span>):  </span><br><span class="line">    x, y, z = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>  <span class="comment">#盒子坐标</span></span><br><span class="line">    dx, dy, dz = data  <span class="comment">#盒子长、宽、高</span></span><br><span class="line">    ax.bar3d(x, y, z, dx, dy, dz, color=<span class="string">&quot;green&quot;</span>,zsort=<span class="string">&#x27;average&#x27;</span>,edgecolor=<span class="string">&#x27;black&#x27;</span>,linewidth=<span class="number">1</span>,alpha=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">···其他代码···</span><br></pre></td></tr></table></figure><p>设置坐标轴的背景颜色</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ax.xaxis.pane.fill = <span class="literal">False</span></span><br><span class="line">ax.yaxis.pane.fill = <span class="literal">False</span></span><br><span class="line">ax.zaxis.pane.fill = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>设置坐标轴不可见</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ax.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">ax.grid(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>设置坐标轴的网格线颜色</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ax.xaxis.pane.set_edgecolor((<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>))</span><br><span class="line">ax.yaxis.pane.set_edgecolor((<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>))</span><br><span class="line">ax.zaxis.pane.set_edgecolor((<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>))</span><br></pre></td></tr></table></figure><p>关闭坐标轴的刻度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ax.set_xticks([])</span><br><span class="line">ax.set_yticks([])</span><br><span class="line">ax.set_zticks([])</span><br><span class="line">box = (<span class="number">1.2</span>,<span class="number">22</span>,<span class="number">105</span>)</span><br></pre></td></tr></table></figure><p>显示立方体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">showbox(box,ax)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="/2024/12/02/matplotlib%E7%BB%98%E5%88%B6%E4%B8%89%E7%BB%B4%E6%95%A3%E7%82%B9%E5%9B%BE/%E6%9C%80%E7%BB%88%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="最终效果"></p>]]></content>
    
    
    <categories>
      
      <category>technique</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>plot</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
